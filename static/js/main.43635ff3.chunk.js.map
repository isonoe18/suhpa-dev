{"version":3,"sources":["Mailing.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["Mailing","props","state","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","messageRef","submitHandler","e","preventDefault","email","getInputVal","console","log","saveMessage","sentMessage","firebase","apps","length","initializeApp","database","ref","id","document","getElementById","value","this","push","set","className","onSubmit","type","name","required","placeholder","Component","Header","url","poster","playHandler","refs","background","play","querySelector","style","display","src","autoPlay","onCanPlay","videoHandler","loop","alt","href","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kUAwDeA,E,YArCX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAfVC,MAAQ,CACJC,eAAiB,CACbC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,qBACXC,cAAe,GACfC,kBAAmB,gBACnBC,MAAO,wCAEXC,WAAY,MAIE,EAQlBC,cAAgB,SAACC,GACbA,EAAEC,iBAEF,IAAIC,EAAQ,EAAKC,YAAY,SAE7BC,QAAQC,IAAIH,GAEZ,EAAKI,YAAYJ,GACjB,EAAKd,MAAMmB,eAdNC,IAASC,KAAKC,SACfF,IAASG,cAAc,EAAKtB,MAAMC,gBAClC,EAAKD,MAAMS,WAAaU,IAASI,WAAWC,IAAI,YAChDT,QAAQC,IAAI,EAAKhB,QALP,E,yEAmBNyB,GACR,OAAOC,SAASC,eAAeF,GAAIG,Q,kCAE3Bf,GACYgB,KAAK7B,MAAMS,WAAWqB,OAC5BC,IAAI,CACdlB,MAAOA,M,+BAIX,OACI,0BAAMmB,UAAU,UAAUC,SAAWJ,KAAKnB,eACtC,2BAAOe,GAAG,QAAQS,KAAK,QAAQC,KAAK,QAAQC,UAAQ,EAACC,YAAY,yBACjE,4BAAQH,KAAK,SAASF,UAAU,OAAM,6C,GA/ChCM,aC0CPC,G,iNAzCXvC,MAAQ,CACJwC,IAAK,2BACLC,OAAQ,oB,EAEZC,YAAc,SAAC/B,GACX,EAAKgC,KAAKC,WAAWC,Q,6EAGrB9B,QAAQC,IAAI,SACZU,SAASoB,cAAc,UAAUC,MAAMC,QAAU,OACjDtB,SAASoB,cAAc,YAAYC,MAAMC,QAAU,S,+BAGnD,OACI,4BAAQhB,UAAU,sBACd,yBAAKA,UAAU,yBACX,2BAAOE,KAAK,YAAYV,IAAI,aAAayB,IAAMpB,KAAK7B,MAAMwC,IAAMC,OAASZ,KAAK7B,MAAMyC,OAASS,UAAQ,EAACC,UAAWtB,KAAKuB,aAAcC,MAAI,KAE5I,yBAAKrB,UAAU,mBACf,yBAAKA,UAAU,yBACX,wBAAIA,UAAU,eAAd,SACA,8FACA,2EACA,kBAAC,EAAD,CAASd,YAAaW,KAAKX,cAC3B,yBAAKc,UAAU,SACX,yBAAKA,UAAU,OAAOiB,IAAI,iBAAiBK,IAAI,KAC/C,6BACI,0DAGR,yBAAKtB,UAAU,kBACX,6BACI,4CACA,uBAAGuB,KAAK,sDAAqD,yBAAKN,IAAI,uBAAuBK,IAAI,c,GAlCxGhB,cCUNkB,E,iLARX,OACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,W,GAJUM,aCQEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASrC,SAASC,eAAe,SD2H3C,kBAAmBqC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.43635ff3.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Mailing.css';\nimport firebase from 'firebase';\n\nclass Mailing extends Component{\n    state = {\n        firebaseConfig : {\n            apiKey: \"AIzaSyAifnC_MtVLo6K6XUC1jfwUVzFeHSHuUCU\",\n            authDomain: \"mailing-list-82fd9.firebaseapp.com\",\n            databaseURL: \"https://mailing-list-82fd9.firebaseio.com\",\n            projectId: \"mailing-list-82fd9\",\n            storageBucket: \"\",\n            messagingSenderId: \"1067308784829\",\n            appId: \"1:1067308784829:web:10850430f796aac8\"\n        },\n        messageRef: null\n        // Initialize Firebase\n        \n    }\n    constructor(props){\n        super(props);\n        if (!firebase.apps.length) {\n            firebase.initializeApp(this.state.firebaseConfig);\n            this.state.messageRef = firebase.database().ref('messages')\n            console.log(this.state)\n        }\n    }\n    submitHandler = (e) => {\n        e.preventDefault()\n\n        var email = this.getInputVal('email')\n\n        console.log(email)\n\n        this.saveMessage(email)\n        this.props.sentMessage()\n        \n    }\n    getInputVal(id){\n        return document.getElementById(id).value;\n    }\n    saveMessage(email){\n        var newMessageRef = this.state.messageRef.push();\n        newMessageRef.set({\n            email: email\n        });\n    }\n    render(){\n        return(\n            <form className=\"mailing\" onSubmit={ this.submitHandler }>\n                <input id=\"email\" type=\"email\" name=\"email\" required placeholder=\"John.Doe@email.co.uk\"/>\n                <button type=\"submit\" className=\"btn\"><strong>GO!</strong></button>\n            </form>\n        );\n    }\n}\nexport default Mailing;","import React, {Component} from 'react';\nimport Mailing from './Mailing'\nimport './SUSU.css'\n\nclass Header extends Component{\n    state = {\n        url: \"./video/assembly-new.mp4\",\n        poster: \"./img/poster.png\"\n    }\n    playHandler = (e) => {\n        this.refs.background.play();\n    }\n    sentMessage() {\n        console.log(\"Hello\")\n        document.querySelector('.alert').style.display = 'flex';\n        document.querySelector('.mailing').style.display = 'none';\n    }\n    render(){\n        return (\n            <header className=\"v-header container\">\n                <div className=\"fullscreen-video-wrap\">\n                    <video type=\"video/mp4\" ref=\"background\" src={ this.state.url } poster={ this.state.poster } autoPlay onCanPlay={this.videoHandler} loop></video>\n                </div>\n                <div className=\"header-overlay\"></div>\n                <div className=\"header-content center\">\n                    <h1 className=\"title-image\">SUHPA</h1>\n                    <p>Its a race! Which gets built first our website or our aircraft.</p>\n                    <p>Want regular updates? Join our mailing list.</p>\n                    <Mailing sentMessage={this.sentMessage}/>\n                    <div className=\"alert\">\n                        <img className=\"tick\" src=\"./img/tick.svg\" alt=\"\"></img>\n                        <div>\n                            <p>Thank you for signing up!</p>\n                        </div>\n                    </div>\n                    <div className=\"SUSU container\">\n                        <div>\n                            <p>Learn more at</p>\n                            <a href=\"https://www.susu.org/groups/human-powered-aircraft\"><img src=\"./img/susu-plain.svg\" alt=\"\"></img></a>\n                        </div>\n                    </div>\n                </div>\n            </header>\n        );\n    }\n}\nexport default Header","import React, {Component} from 'react';\nimport Header from './Header'\nimport './index.css'\n\nclass App extends Component {\n  render(){\n    return (\n      <div className=\"App\">\n        <Header />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}